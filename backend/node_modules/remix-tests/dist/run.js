"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var Web3 = require("web3");
var runTestFiles_1 = require("./runTestFiles");
var fileSystem_1 = __importDefault(require("./fileSystem"));
var remix_simulator_1 = require("remix-simulator");
var logger_1 = __importDefault(require("./logger"));
var logger = new logger_1.default();
var log = logger.logger;
var colors_1 = __importDefault(require("colors"));
// parse verbosity
function mapVerbosity(v) {
    var levels = {
        0: 'error',
        1: 'warn',
        2: 'info',
        3: 'verbose',
        4: 'debug',
        5: 'silly'
    };
    return levels[v];
}
var version = require('../package.json').version;
commander_1.default.version(version);
commander_1.default.command('version').description('output the version number').action(function () {
    console.log(version);
});
commander_1.default.command('help').description('output usage information').action(function () {
    commander_1.default.help();
});
// get current version
commander_1.default
    .option('-v, --verbose <level>', 'run with verbosity', mapVerbosity)
    .action(function (filename) {
    // Console message
    console.log(colors_1.default.white('\n\tüëÅ\t:: Running remix-tests - Unit testing for solidity ::\tüëÅ\n'));
    // set logger verbosity
    if (commander_1.default.verbose) {
        logger.setVerbosity(commander_1.default.verbose);
        log.info('verbosity level set to ' + commander_1.default.verbose.blue);
    }
    var web3 = new Web3();
    // web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'))
    web3.setProvider(new remix_simulator_1.Provider());
    // web3.setProvider(new web3.providers.WebsocketProvider('ws://localhost:8546'))
    if (!fileSystem_1.default.existsSync(filename)) {
        console.error(filename + ' not found');
        process.exit(1);
    }
    var isDirectory = fileSystem_1.default.lstatSync(filename).isDirectory();
    runTestFiles_1.runTestFiles(filename, isDirectory, web3);
});
if (!process.argv.slice(2).length) {
    log.error('Please specify a filename');
    process.exit();
}
commander_1.default.parse(process.argv);
//# sourceMappingURL=run.js.map